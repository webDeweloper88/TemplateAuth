// src/mail/mail.service.ts
import { BadRequestException, Injectable } from '@nestjs/common';
import * as nodemailer from 'nodemailer';
import { Logger, InternalServerErrorException } from '@nestjs/common';

@Injectable()
export class MailService {
  private transporter;

  constructor() {
    this.transporter = nodemailer.createTransport({
      host: 'smtp.gmail.com',
      port: 465,
      secure: true,
      auth: {
        user: 'webdeweloper88@gmail.com',
        pass: 'rxws urdn ybor nzly',
      },
    });
  }

  async sendVerificationEmail(
    email: string,
    token: string,
    username: string,
  ): Promise<void> {
    const url = `http://localhost:3000/auth/confirm-email?token=${token}`;

    const emailContent = {
      from: '"QuizApp" <webdeweloper88@gmail.com>',
      to: email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Email',
      text: `–ü—Ä–∏–≤–µ—Ç, ${username}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∑–Ω–∞–Ω–∏–π –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω! üß† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: ${url}`,
      html: `
        <p>–ü—Ä–∏–≤–µ—Ç, <strong>${username}</strong>! üëã</p>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∑–Ω–∞–Ω–∏–π –∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω! üß†</p>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:</p>
        <a href="${url}">${url}</a>
      `,
    };

    try {
      await this.transporter.sendMail(emailContent);
      Logger.log(`–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞–¥—Ä–µ—Å: ${email}`);
    } catch (error) {
      Logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞ –∞–¥—Ä–µ—Å: ${email}. –û—à–∏–±–∫–∞: ${error.message}`,
      );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email
      if (
        error.responseCode === 550 ||
        error.message.includes('Invalid recipient')
      ) {
        throw new BadRequestException(
          `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å: ${email}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.`,
        );
      }

      // –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
      throw new InternalServerErrorException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  async sendPasswordResetEmail(email: string, token: string): Promise<void> {
    const resetUrl = `http://localhost:3000/auth/reset-password?token=${token}`;

    const mailOptions = {
      from: '"Your App Name" <your-email@example.com>',
      to: email,
      subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è',
      text: `–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: ${resetUrl}`,
      html: `<p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ:</p><a href="${resetUrl}">${resetUrl}</a>`,
    };

    await this.transporter.sendMail(mailOptions);
  }
}
