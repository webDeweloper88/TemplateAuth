Отлично! Для реализации среднего подхода между базовым и профессиональным уровнем аутентификации с JWT и refresh токенами, мы можем включить несколько ключевых улучшений для безопасности и удобства, но при этом не усложнять логику до уровня крупных корпоративных систем.

Вот план действий:
1. Аутентификация и генерация токенов
Оставляем базовый подход с accessToken и refreshToken, но добавляем улучшения:
accessToken будет действовать короткое время (например, 15-30 минут).
refreshToken будет действовать дольше (например, 7 дней).
Добавляем генерацию и ротацию refresh токенов при каждом обновлении токенов.
2. Хранение токенов
Refresh токен сохраняем в базе данных, привязывая его к конкретному пользователю и устройству (если нужно).
Используем метод ротации refreshToken — при каждом обновлении access токена создаётся новый refreshToken, а старый удаляется.
Дополнительно реализуем логику с истечением срока действия refreshToken.
3. Ротация токенов и защита
Каждый раз, когда пользователь обновляет токены, генерируем новый набор accessToken и refreshToken.
Старые токены refreshToken должны удаляться, чтобы предотвратить возможность повторного использования.
Зашифруем refreshToken при хранении в базе данных для дополнительной защиты.
4. Масштабируемость
Храним refreshToken в базе данных, которая легко масштабируется.
Используем кэширование для ускорения проверки токенов (например, с помощью Redis можно кэшировать информацию о валидности токенов).
5. Логирование и мониторинг
Реализуем базовое логирование входов и обновлений токенов (например, когда пользователь авторизовался, запросил обновление токенов или произошли ошибки авторизации).
Дополнительно логируем неудачные попытки входа (например, с неправильными данными).
6. Ограничение попыток входа
Добавляем ограничение на количество неудачных попыток входа. Если количество превышено, аккаунт блокируется временно или пользователь получает уведомление.
7. Реализация ролей
Добавим базовое разграничение прав доступа через роли (например, user и admin), используя Guards для проверки ролей на защищённых маршрутах.
8. Безопасность
Храним accessToken в памяти клиента (например, в localStorage или sessionStorage).
Храним refreshToken в HttpOnly cookie с флагом Secure, чтобы защитить от XSS-атак.
9. Кэширование токенов (опционально)
Для ускорения работы и уменьшения нагрузки на базу данных можно реализовать кэширование токенов с использованием Redis или другого кэша. Это позволит быстро проверять валидность токенов без постоянных обращений к базе данных.
Конечные точки API:
1. Регистрация (Sign up):
Оставляем как есть: POST /auth/signup
2. Авторизация (Sign in):
Оставляем как есть: POST /auth/signin
3. Обновление токенов (Refresh tokens):
Оставляем как есть: POST /auth/refresh
Добавляем логику ротации refreshToken.
4. Выход (Logout):
POST /auth/logout: Удаляем refreshToken из базы данных, чтобы токен не мог быть использован повторно.
5. Профиль пользователя:
Оставляем как есть: GET /user/profile с проверкой accessToken.
6. Изменение пароля:
POST /auth/change-password: Обязательная проверка старого пароля, перед тем как разрешить смену на новый.
Пример архитектуры:
AuthModule:

Содержит логику для логина, регистрации, обновления токенов и выхода.
Используем JwtService для генерации и проверки токенов.
UserModule:

Управление пользователями, профилями и паролями.
TokenService:

Логика для работы с refreshToken, включая их генерацию, проверку, ротацию и удаление.
Guards:

Для проверки доступа на основе ролей (user, admin).
Дополнительные улучшения:
Логирование всех операций с токенами.
Защита от повторного использования токенов.
Уведомления о подозрительной активности (например, вход с нового устройства).
Такой подход балансирует между простотой и профессионализмом, обеспечивая хороший уровень безопасности и производительности без излишней сложности.